#!@bash@/bin/bash
set -euo pipefail

PATH=@path@

if [[ $# -ne 2 ]] && [[ $# -ne 1 ]]; then
    cat >&2 <<EOF

USAGE: nix run .#deploy -- <public_url> [rsync_target]

Builds bootstrap zip ball and source code tar ball (for usage as a channel or
flake). If rsync_target is specified, uploads it to the directory specified
in rsync_target. The contents of this directory should be reachable by the
android device with public_url.

Examples:
$ nix run .#deploy -- 'https://example.com/bootstrap/source.tar.gz' 'user@host:/path/to/bootstrap'
$ nix run .#deploy -- 'github:USER/nix-on-droid/BRANCH' 'user@host:/path/to/bootstrap'

EOF
    exit 1
fi

PUBLIC_URL="$1"
if [[ $# == 2 ]]; then
  RSYNC_TARGET="$2"
else
  RSYNC_TARGET=""
fi
: ${ARCHES:=aarch64 x86_64}

# this allows to run this script from every place in this git repo
REPO_DIR="$(git rev-parse --show-toplevel)"

cd "$REPO_DIR"

SOURCE_FILE="source.tar.gz"

function log() {
    echo "> $*"
}


if [[ "$PUBLIC_URL" =~ ^github:(.*)/(.*)/(.*) ]]; then
    export NIX_ON_DROID_CHANNEL_URL="https://github.com/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}/archive/${BASH_REMATCH[3]}.tar.gz"
else
    [[ "$PUBLIC_URL" =~ ^https?:// ]] || \
    [[ "$PUBLIC_URL" =~ ^file:/// ]] || \
        { echo "unsupported url $PUBLIC_URL" >&2; exit 1; }
    export NIX_ON_DROID_CHANNEL_URL="$PUBLIC_URL"
fi
# special case for local / CI testing
if [[ "$PUBLIC_URL" =~ ^file:///(.*)/archive.tar.gz ]]; then
    export NIX_ON_DROID_FLAKE_URL="/${BASH_REMATCH[1]}/unpacked"
else
    export NIX_ON_DROID_FLAKE_URL="$PUBLIC_URL"
fi
export NIX_ON_DROID_BASE_URL="${PUBLIC_URL%/*}"

log "NIX_ON_DROID_CHANNEL_URL=$NIX_ON_DROID_CHANNEL_URL"
log "NIX_ON_DROID_FLAKE_URL=$NIX_ON_DROID_FLAKE_URL"
log "NIX_ON_DROID_BASE_URL=$NIX_ON_DROID_BASE_URL"

UPLOADS=()
for arch in $ARCHES; do
    log "building $arch proot..."
    proot="$(nix build --no-link --print-out-paths ".#prootTermux-${arch}")"
    proot_hash="$(nix-hash --type sha256 --sri "$proot"/bin/proot-static)"
    attrs_file="modules/environment/login/proot-attrs/$arch.nix"
    new_attrs_file="$(mktemp)"

    cat >$new_attrs_file <<EOF
# WARNING: This file is autogenerated by the deploy script. Any changes will be overridden
{
  url = "$NIX_ON_DROID_BASE_URL/bootstrap-$arch.zip";
  hash = "$proot_hash";
}
EOF

    if [[ ! -f $attrs_file ]]; then
        log "warn: $attrs_file not present; creating"
        mv $new_attrs_file $attrs_file
        log "adding $attrs_file to git index"
        git add $attrs_file
    elif diff $attrs_file $new_attrs_file >/dev/null; then
        log "no changes needed to $attrs_file"
    else
        log "updating contents of $attrs_file"
        echo "<<<<<<"
        cat $attrs_file
        echo "======"
        mv $new_attrs_file $attrs_file
        cat $attrs_file
        echo ">>>>>>"
        log "adding $attrs_file to git index"
        git add $attrs_file
    fi

    log "building $arch bootstrapZip..."
    BOOTSTRAP_ZIP="$(nix build --no-link --print-out-paths --impure ".#bootstrapZip-${arch}")"
    UPLOADS+=($BOOTSTRAP_ZIP/bootstrap-$arch.zip)
done


log "creating tar ball of current HEAD..."
git archive --prefix nix-on-droid/ --output "$SOURCE_FILE" HEAD
UPLOADS+=($SOURCE_FILE)


log "uploading artifacts..."
if [[ -n "$RSYNC_TARGET" ]]; then
  rsync --progress "${UPLOADS[@]}" "$RSYNC_TARGET"
else
  echo "Would have uploaded ${UPLOADS[@]}"
fi
